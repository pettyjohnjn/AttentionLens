#!/bin/bash
#PBS -l select=1
#PBS -l walltime=00:10:00
#PBS -q debug
#PBS -l filesystems=home:grand:eagle
#PBS -A SuperBERT

cd "/home/pettyjohnjn/AttentionLens/attention_lens"
echo "working dir: "
pwd

# Figure out training environment
if [[ -z "${PBS_NODEFILE}" ]]; then
    RANKS=$HOSTNAME
    NNODES=1
else
    MASTER_RANK=$(head -n 1 $PBS_NODEFILE)
    echo "Master Rank: "$MASTER_RANK
    RANKS=$(tr '\n' ' ' < $PBS_NODEFILE)
    NNODES=$(< $PBS_NODEFILE wc -l)
fi

# Commands to run prior to the Python script for setting up the environment
PRELOAD+="module use /soft/modulefiles; module load conda; conda activate AttnLens_Test;  "
PRELOAD+="export OMP_NUM_THREADS=8 ; "
PRELOAD+="source ~/.bashrc ; "

# time python process to ensure timely job exit
TIMER="timeout 718m "

# Generate accelerate config
echo "Generating accelerate config..."
cat <<EOL > accelerate_config.yaml
compute_environment: LOCAL_MACHINE
debug: false
distributed_type: MULTI_GPU
downcast_bf16: 'YES'
enable_cpu_affinity: false
gpu_ids: all
machine_rank: 0
main_process_ip: ${MASTER_RANK}
main_process_port: 1222
main_training_function: main
mixed_precision: bf16
num_machines: ${NNODES}
num_processes: 4
rdzv_backend: static
same_network: true
tpu_env: []
tpu_use_cluster: false
tpu_use_sudo: false
use_cpu: false
EOL

CMD="accelerate config update --config_file accelerate_config.yaml"


RANK=0
for NODE in $RANKS; do
    if [[ "$NODE" == "$MASTER_RANK" ]]; then
        sed -i "s/machine_rank: 0/machine_rank: $RANK/" accelerate_config.yaml
    fi
    RANK=$((RANK+1))
done

# Training script and parameters
echo "ckpt dir: "$ckpt
echo "layer num: "$l_num
echo "model name: "$model_name
CMD="../train.py --num_nodes $NNODES --model_name $model_name --checkpoint_dir $ckpt --layer_number $l_num"

RANK=0
for NODE in $RANKS; do
    NODERANK=" --node_rank=$RANK "
    FULL_CMD=" $PRELOAD accelerate launch --config_file accelerate_config.yaml $CMD $@ "
    echo "Training Command: $FULL_CMD"

    if [[ "$NODE" == "$HOSTNAME" ]]; then
        echo "Launching rank $RANK on local node $NODE"
        eval $FULL_CMD &
    else
        echo "Launching rank $RANK on remote node $NODE"
        ssh $NODE "cd $PWD; $FULL_CMD" &
    fi
    RANK=$((RANK+1))
done

wait